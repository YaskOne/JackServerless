AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    sam-app

    Sample SAM Template for sam-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        Timeout: 15

Parameters:
    DBUsername:
        Type: String
        Default: JackAdmin

    DBPassword:
        Type: String
        Default: ArgosBubble3

    DBName :
        Type : String
        Default: JackProdDB

    DBType:
        Type: String
        Default: db.t2.micro

    DBCapacity:
        Type: Number
        Default: 20

#    S3BucketName:
#        Type: String
#        Default: indigovault-documents.stratumn.com

Resources:

  JackAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      Handler: jackAuthorizer
      CodeUri: bin
      Runtime: go1.x

  # Business

  createBusiness:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: createBusiness
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /business/create
            Method: post

  ordersWatcher:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: ordersWatcher
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /order/watcher
            Method: post
  deleteItem:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: deleteItem
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /delete
            Method: post

  getBusinessById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: getBusinessById
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /business
            Method: get

  updateBusiness:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: updateBusiness
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /business/update
            Method: post

  LogBusiness:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: logBusiness
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /business/log
            Method: get

  GetBusinessStocks:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: getBusinessStocks
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /business/stocks
            Method: get

  # Stocks

  getProducts:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: getProducts
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /product
            Method: get

  getCategories:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: getCategories
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /category
            Method: get

  updateCategory:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: updateCategory
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /category/update
            Method: post

  updateProduct:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: updateProduct
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /product/update
            Method: post

  # Order

  getOrders:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: getOrders
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /order
            Method: get

  updateOrder:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: updateOrder
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /order/update
            Method: post

  # Order
  CreateOrder:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: createOrder
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /business/order/create
            Method: post

  # Stock
  CreateProduct:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: createProduct
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /business/product/create
            Method: post
  CreateCategory:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: createCategory
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /business/category/create
            Method: post

  # User
  LogUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: logUser
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /user/log
            Method: get

  updateUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: updateUser
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /user/update
            Method: post

  GetUsers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: getUsers
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /user
            Method: get
  CreateUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: createUser
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /user/create
            Method: post
#  deleteUser:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: ./bin
#      Handler: deleteUser
#      Runtime: go1.x
#      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
#      Events:
#        GetEvent:
#          Type: Api
#          Properties:
#            Path: /user/delete
#            Method: post

  # Payment

#  ephemeralKey:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: ./bin
#      Handler: ephemeralKey
#      Runtime: go1.x
#      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
#      Events:
#        GetEvent:
#          Type: Api
#          Properties:
#            Path: /payment/ephemeral_key
#            Method: post

  ResetDB:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin
      Handler: resetDB
      Runtime: go1.x
      Role: arn:aws:iam::318620884208:role/LambdaVPCAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /utils/reset
            Method: get
#  MySQLCluster:
#    Type: AWS::RDS::DBInstance
#    Properties:
#      AllocatedStorage: !Ref DBCapacity
#      DBInstanceClass: !Ref DBType
#      Engine: "MySQL"
##      EngineVersion: "5.6.13"
##      Iops: "1000"
#      MasterUsername:
#        Ref: !Ref DBUsername
#      MasterUserPassword:
#        Ref: !Ref DBPassword

#  MySQLCluster:
##      DependsOn: PostgresSecurityGroup
#      Type: AWS::RDS::DBInstance
#      Properties:
#          Engine: MySQL
#          DBName: !Ref DBName
#          MasterUsername: !Ref DBUsername
#          MasterUserPassword: !Ref DBPassword
#          DBInstanceClass: !Ref DBType
#          AllocatedStorage:
#  WriteCapacityScalableTarget:
#    Type: AWS::ApplicationAutoScaling::ScalableTarget
#    Properties:
#      MaxCapacity: 15
#      MinCapacity: 5
#      RoleARN: !GetAtt ScalingRole.Arn
#      ResourceId: !Join
#        - /
#        - - table
##          - !Ref JackDB
#          - !Ref BusinessTable
#      ScalableDimension: dynamodb:table:WriteCapacityUnits
#      ServiceNamespace: dynamodb
#  ScalingRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          -
#            Effect: "Allow"
#            Principal:
#              Service:
#                - application-autoscaling.amazonaws.com
#            Action:
#              - "sts:AssumeRole"
#      Path: "/"
#      Policies:
#        -
#          PolicyName: "root"
#          PolicyDocument:
#            Version: "2012-10-17"
#            Statement:
#              -
#                Effect: "Allow"
#                Action: "*"
#                Resource: "*"


#  PostgresCluster:
#      DependsOn: PostgresSecurityGroup
#      Type: AWS::RDS::DBInstance
#      Properties:
#          Engine: MySQL
#          DBName: "Jacking"
#          MasterUsername: "Arthur"
#          MasterUserPassword: ""
#          DBInstanceClass: !Ref DBType
#          AllocatedStorage: !Ref DBCapacity
#          DBSubnetGroupName: !Ref PostgresSubnetGroup
#          VPCSecurityGroups:
#              - !GetAtt PostgresSecurityGroup.GroupId

#  WriteScalingPolicy:
#    Type: AWS::ApplicationAutoScaling::ScalingPolicy
#    Properties:
#      PolicyName: WriteAutoScalingPolicy
#      PolicyType: TargetTrackingScaling
#      ScalingTargetId: !Ref WriteCapacityScalableTarget
#      TargetTrackingScalingPolicyConfiguration:
#        TargetValue: 50.0
#        ScaleInCooldown: 60
#        ScaleOutCooldown: 60
#        PredefinedMetricSpecification:
#          PredefinedMetricType: DynamoDBWriteCapacityUtilization
#
#Outputs:
#
#  Endpoint:
#    Value:  !Sub "http://jack-world-app.s3-website.eu-west-2.amazonaws.com/Prod/"
